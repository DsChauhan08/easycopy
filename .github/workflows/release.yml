name: Build & Release

# === TRIGGER: static tag v1-alpha ===
on:
  push:
    tags:
      - 'v1-alpha'   # <--- static tag. push this tag to create a release

env:
  PACKAGE_NAME: easycopy

jobs:
  build-linux:
    name: Build Linux (x86_64 & aarch64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (toolchain from rust-toolchain file if present)
        uses: dtolnay/rust-toolchain-action@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package tar.gz
        run: |
          mkdir -p dist
          # copy binary (try arch-specific then fallback)
          if [ -f target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }} ]; then
            cp target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }} dist/
          else
            cp target/release/${{ env.PACKAGE_NAME }} dist/ || true
          fi
          TARFILE=${{ env.PACKAGE_NAME }}-${{ matrix.target }}-${{ github.ref_name }}.tar.gz
          tar -C dist -czvf "$TARFILE" -C dist ${{ env.PACKAGE_NAME }}
          ls -lh "$TARFILE"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}-${{ github.ref_name }}.tar.gz
          path: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}-${{ github.ref_name }}.tar.gz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain-action@stable
      - name: Build
        run: cargo build --release
      - name: Zip exe
        run: powershell -Command "Compress-Archive -Path target\\release\\${{ env.PACKAGE_NAME }}.exe -DestinationPath $env:PACKAGE_NAME-windows-${{ github.ref_name }}.zip"
        shell: powershell
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-windows-${{ github.ref_name }}.zip
          path: ${{ env.PACKAGE_NAME }}-windows-${{ github.ref_name }}.zip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain-action@stable
      - name: Build
        run: cargo build --release
      - name: Tar macOS binary
        run: |
          mkdir -p dist
          cp target/release/${{ env.PACKAGE_NAME }} dist/
          tar -C dist -czvf ${{ env.PACKAGE_NAME }}-macos-${{ github.ref_name }}.tar.gz -C dist ${{ env.PACKAGE_NAME }}
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-macos-${{ github.ref_name }}.tar.gz
          path: ${{ env.PACKAGE_NAME }}-macos-${{ github.ref_name }}.tar.gz

  publish:
    name: Create Release & Upload Packages
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Rust (for cargo-deb packaging)
        uses: dtolnay/rust-toolchain-action@stable

      - name: Build release (native)
        run: cargo build --release

      - name: Install cargo-deb
        run: cargo install cargo-deb || true

      - name: Create .deb using cargo-deb
        run: |
          cargo deb --no-build
          mkdir -p out
          mv target/debian/*.deb out/ || true
          ls -lh out || true

      - name: Install fpm (for .rpm)
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Create .rpm with fpm
        run: |
          BIN=target/release/${{ env.PACKAGE_NAME }}
          test -f "$BIN" || { echo "$BIN not found"; exit 1; }
          fpm -s dir -t rpm -n ${{ env.PACKAGE_NAME }} -v "${{ github.ref_name }}" --prefix=/usr/bin "$BIN"
          mkdir -p out
          mv *.rpm out/ || true
          ls -lh out || true

      - name: Create GitHub Release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: |
            artifacts/**
            out/**
