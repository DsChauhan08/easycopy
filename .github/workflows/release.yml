name: Build & Release

# Trigger on version tags (v1.0.0, v1.0.0-alpha, etc.)
on:
  push:
    tags:
      - 'v*'

env:
  PACKAGE_NAME: easycopy
  OPENSSL_NO_PKG_CONFIG: "1"
  OPENSSL_VENDORED: "1"

jobs:
  build-linux:
    name: Build Linux x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release (vendored OpenSSL)
        run: cargo build --release

      - name: Package tar.xz
        run: |
          mkdir -p dist
          cp target/release/${{ env.PACKAGE_NAME }} dist/
          chmod +x dist/${{ env.PACKAGE_NAME }}
          TARFILE=${{ env.PACKAGE_NAME }}-x86_64-unknown-linux-gnu-${{ github.ref_name }}.tar.xz
          tar -C dist -cJf "$TARFILE" ${{ env.PACKAGE_NAME }}
          ls -lh "$TARFILE"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-linux
          path: ${{ env.PACKAGE_NAME }}-x86_64-unknown-linux-gnu-${{ github.ref_name }}.tar.xz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build (vendored OpenSSL)
        run: cargo build --release
      - name: Package exe
        run: |
          mkdir -p dist
          cp target/release/${{ env.PACKAGE_NAME }}.exe dist/
          Compress-Archive -Path dist/${{ env.PACKAGE_NAME }}.exe -DestinationPath ${{ env.PACKAGE_NAME }}-x86_64-pc-windows-msvc-${{ github.ref_name }}.zip
        shell: powershell
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-windows
          path: ${{ env.PACKAGE_NAME }}-x86_64-pc-windows-msvc-${{ github.ref_name }}.zip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build (vendored OpenSSL)
        run: cargo build --release
      - name: Package macOS binary
        run: |
          mkdir -p dist
          cp target/release/${{ env.PACKAGE_NAME }} dist/
          chmod +x dist/${{ env.PACKAGE_NAME }}
          tar -C dist -cJf ${{ env.PACKAGE_NAME }}-x86_64-apple-darwin-${{ github.ref_name }}.tar.xz ${{ env.PACKAGE_NAME }}
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-macos
          path: ${{ env.PACKAGE_NAME }}-x86_64-apple-darwin-${{ github.ref_name }}.tar.xz

  publish:
    name: Create Release & Upload Packages
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install OpenSSL dev packages (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      - name: Build release (native x86_64)
        run: cargo build --release

      - name: Create source tarball
        run: |
          git archive --format=tar --prefix=${{ env.PACKAGE_NAME }}-${{ github.ref_name }}/ HEAD | xz -9 > ${{ env.PACKAGE_NAME }}-${{ github.ref_name }}-source.tar.xz
          ls -lh ${{ env.PACKAGE_NAME }}-${{ github.ref_name }}-source.tar.xz

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Create .deb package
        run: |
          cargo deb --no-build --no-strip
          mkdir -p packages
          cp target/debian/*.deb packages/
          ls -lh packages/*.deb

      - name: Install fpm (for .rpm)
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Create .rpm package with fpm
        run: |
          VERSION="$(echo ${{ github.ref_name }} | sed 's/^v//')"
          BIN=target/release/${{ env.PACKAGE_NAME }}
          test -f "$BIN" || { echo "$BIN not found"; exit 1; }
          fpm -s dir -t rpm \
            -n ${{ env.PACKAGE_NAME }} \
            -v "$VERSION" \
            --description "Flatten a GitHub repo into a single static HTML page" \
            --url "https://github.com/${{ github.repository }}" \
            --license "BSD-Zero-Clause" \
            --prefix=/usr/bin \
            "$BIN"
          mkdir -p packages
          mv *.rpm packages/
          ls -lh packages/*.rpm

      - name: Organize release files
        run: |
          mkdir -p release
          # Copy all artifacts
          find artifacts -type f \( -name "*.tar.xz" -o -name "*.zip" \) -exec cp {} release/ \;
          # Copy packages
          cp packages/*.deb release/ 2>/dev/null || true
          cp packages/*.rpm release/ 2>/dev/null || true
          # Copy source
          cp ${{ env.PACKAGE_NAME }}-${{ github.ref_name }}-source.tar.xz release/
          ls -lh release/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generateReleaseNotes: true
          files: release/*
